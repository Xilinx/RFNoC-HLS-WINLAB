// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pn_seq_gen_lfsr,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k410tffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.602000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=21,HLS_SYN_LUT=31}" *)

module pn_seq_gen_lfsr (
        ap_clk,
        ap_rst,
        load_V,
        pn_req_V,
        poly_V,
        seed_V,
        order_V,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv5_A = 5'b1010;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [0:0] load_V;
input  [0:0] pn_req_V;
input  [9:0] poly_V;
input  [9:0] seed_V;
input  [3:0] order_V;
output  [0:0] ap_return;

reg   [9:0] shift_reg_V = 10'b0000000000;
reg   [9:0] poly_reg_V = 10'b0000000000;
wire   [9:0] tmp_fu_114_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_25;
wire   [0:0] load_V_read_read_fu_78_p2;
wire   [0:0] pn_req_V_read_read_fu_72_p2;
wire   [9:0] r_V_fu_92_p2;
reg   [0:0] p_Repl2_s_fu_98_p2;
wire   [8:0] p_Result_4_fu_104_p4;
wire   [4:0] tmp_1_cast_fu_128_p1;
wire   [4:0] bvh_d_index_fu_132_p2;
wire  signed [31:0] index_assign_cast_fu_138_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_35;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_poly_reg_V
    if (ap_rst == 1'b1) begin
        poly_reg_V <= ap_const_lv10_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(load_V_read_read_fu_78_p2 == ap_const_lv1_0))) begin
            poly_reg_V <= poly_V;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_shift_reg_V
    if (ap_rst == 1'b1) begin
        shift_reg_V <= ap_const_lv10_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            if (~(load_V_read_read_fu_78_p2 == ap_const_lv1_0)) begin
                shift_reg_V <= seed_V;
            end else if (ap_sig_bdd_35) begin
                shift_reg_V <= tmp_fu_114_p3;
            end
        end
    end
end

always @ (ap_sig_bdd_25) begin
    if (ap_sig_bdd_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = shift_reg_V[index_assign_cast_fu_138_p1];


always @ (ap_CS_fsm) begin
    ap_sig_bdd_25 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (load_V_read_read_fu_78_p2 or pn_req_V_read_read_fu_72_p2) begin
    ap_sig_bdd_35 = ((load_V_read_read_fu_78_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == pn_req_V_read_read_fu_72_p2));
end

assign bvh_d_index_fu_132_p2 = (ap_const_lv5_A - tmp_1_cast_fu_128_p1);

assign index_assign_cast_fu_138_p1 = $signed(bvh_d_index_fu_132_p2);

assign load_V_read_read_fu_78_p2 = load_V;


integer ap_tvar_int_0;

always @ (r_V_fu_92_p2) begin
    p_Repl2_s_fu_98_p2 = 1'b0;
    for (ap_tvar_int_0 = 10 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        p_Repl2_s_fu_98_p2 = p_Repl2_s_fu_98_p2 ^ r_V_fu_92_p2[ap_tvar_int_0];
    end
end



assign p_Result_4_fu_104_p4 = {{shift_reg_V[ap_const_lv32_9 : ap_const_lv32_1]}};

assign pn_req_V_read_read_fu_72_p2 = pn_req_V;

assign r_V_fu_92_p2 = (poly_reg_V & shift_reg_V);

assign tmp_1_cast_fu_128_p1 = order_V;

assign tmp_fu_114_p3 = {{p_Repl2_s_fu_98_p2}, {p_Result_4_fu_104_p4}};


endmodule //pn_seq_gen_lfsr

